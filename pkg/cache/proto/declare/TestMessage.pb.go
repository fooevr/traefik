// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/declare/TestMessage.proto

package declares

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestMessage struct {
	Value                string                  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Nullable             *wrappers.Int32Value    `protobuf:"bytes,2,opt,name=nullable,proto3" json:"nullable,omitempty"`
	Msg                  *TestMessage            `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	MapValue             map[string]int32        `protobuf:"bytes,4,rep,name=mapValue,proto3" json:"mapValue,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapMsg               map[string]*TestMessage `protobuf:"bytes,5,rep,name=mapMsg,proto3" json:"mapMsg,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepeatedValue        []string                `protobuf:"bytes,10,rep,name=repeatedValue,proto3" json:"repeatedValue,omitempty"`
	RepeatedMsg          []*TestMessage          `protobuf:"bytes,999,rep,name=repeatedMsg,proto3" json:"repeatedMsg,omitempty"`
	H                    *Heheda                 `protobuf:"bytes,1000,opt,name=h,proto3" json:"h,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *TestMessage) Reset()         { *m = TestMessage{} }
func (m *TestMessage) String() string { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()    {}
func (*TestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ff1655e64562b86, []int{0}
}

func (m *TestMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestMessage.Unmarshal(m, b)
}
func (m *TestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestMessage.Marshal(b, m, deterministic)
}
func (m *TestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMessage.Merge(m, src)
}
func (m *TestMessage) XXX_Size() int {
	return xxx_messageInfo_TestMessage.Size(m)
}
func (m *TestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestMessage proto.InternalMessageInfo

func (m *TestMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TestMessage) GetNullable() *wrappers.Int32Value {
	if m != nil {
		return m.Nullable
	}
	return nil
}

func (m *TestMessage) GetMsg() *TestMessage {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *TestMessage) GetMapValue() map[string]int32 {
	if m != nil {
		return m.MapValue
	}
	return nil
}

func (m *TestMessage) GetMapMsg() map[string]*TestMessage {
	if m != nil {
		return m.MapMsg
	}
	return nil
}

func (m *TestMessage) GetRepeatedValue() []string {
	if m != nil {
		return m.RepeatedValue
	}
	return nil
}

func (m *TestMessage) GetRepeatedMsg() []*TestMessage {
	if m != nil {
		return m.RepeatedMsg
	}
	return nil
}

func (m *TestMessage) GetH() *Heheda {
	if m != nil {
		return m.H
	}
	return nil
}

type Heheda struct {
	He                   string   `protobuf:"bytes,1,opt,name=he,proto3" json:"he,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Heheda) Reset()         { *m = Heheda{} }
func (m *Heheda) String() string { return proto.CompactTextString(m) }
func (*Heheda) ProtoMessage()    {}
func (*Heheda) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ff1655e64562b86, []int{1}
}

func (m *Heheda) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Heheda.Unmarshal(m, b)
}
func (m *Heheda) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Heheda.Marshal(b, m, deterministic)
}
func (m *Heheda) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heheda.Merge(m, src)
}
func (m *Heheda) XXX_Size() int {
	return xxx_messageInfo_Heheda.Size(m)
}
func (m *Heheda) XXX_DiscardUnknown() {
	xxx_messageInfo_Heheda.DiscardUnknown(m)
}

var xxx_messageInfo_Heheda proto.InternalMessageInfo

func (m *Heheda) GetHe() string {
	if m != nil {
		return m.He
	}
	return ""
}

func init() {
	proto.RegisterType((*TestMessage)(nil), "com.variflight.dataservice.declare.TestMessage")
	proto.RegisterMapType((map[string]*TestMessage)(nil), "com.variflight.dataservice.declare.TestMessage.MapMsgEntry")
	proto.RegisterMapType((map[string]int32)(nil), "com.variflight.dataservice.declare.TestMessage.MapValueEntry")
	proto.RegisterType((*Heheda)(nil), "com.variflight.dataservice.declare.Heheda")
}

func init() { proto.RegisterFile("proto/declare/TestMessage.proto", fileDescriptor_0ff1655e64562b86) }

var fileDescriptor_0ff1655e64562b86 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0xea, 0xd3, 0x40,
	0x14, 0xc5, 0x9d, 0xc4, 0xf4, 0xdf, 0xde, 0x50, 0x91, 0xc1, 0x45, 0xa8, 0xa0, 0xa1, 0x75, 0x11,
	0x5c, 0x4c, 0xa0, 0x5d, 0xf8, 0x51, 0x5c, 0xf8, 0x51, 0xd0, 0x45, 0x40, 0x52, 0x11, 0x74, 0x37,
	0x4d, 0x6e, 0x93, 0x6a, 0xd2, 0x84, 0x99, 0xb4, 0x52, 0x1f, 0xc7, 0xa5, 0xe0, 0x73, 0xe9, 0x23,
	0xb8, 0x94, 0x4c, 0x92, 0x36, 0x05, 0xa1, 0x1f, 0xbb, 0x64, 0x72, 0xcf, 0x6f, 0x4e, 0x0e, 0xe7,
	0xc2, 0xc3, 0x5c, 0x64, 0x45, 0xe6, 0x86, 0x18, 0x24, 0x5c, 0xa0, 0xfb, 0x01, 0x65, 0xe1, 0xa1,
	0x94, 0x3c, 0x42, 0xa6, 0xbe, 0xd0, 0x61, 0x90, 0xa5, 0x6c, 0xcb, 0xc5, 0x6a, 0x99, 0xac, 0xa2,
	0xb8, 0x60, 0x21, 0x2f, 0xb8, 0x44, 0xb1, 0x5d, 0x05, 0xc8, 0x6a, 0xd5, 0xe0, 0x41, 0x94, 0x65,
	0x51, 0x82, 0xae, 0x52, 0x2c, 0x36, 0x4b, 0xf7, 0x9b, 0xe0, 0x79, 0x8e, 0x42, 0x56, 0x8c, 0xe1,
	0x2f, 0x03, 0xcc, 0x16, 0x99, 0xde, 0x03, 0x63, 0xcb, 0x93, 0x0d, 0x5a, 0xc4, 0x26, 0x4e, 0xcf,
	0xaf, 0x5e, 0xe8, 0x13, 0xe8, 0xae, 0x37, 0x49, 0xc2, 0x17, 0x09, 0x5a, 0x9a, 0x4d, 0x1c, 0x73,
	0x7c, 0x9f, 0x55, 0x60, 0xd6, 0x80, 0xd9, 0xbb, 0x75, 0x31, 0x19, 0x7f, 0x2c, 0xc7, 0xfd, 0xfd,
	0x30, 0x7d, 0x09, 0x7a, 0x2a, 0x23, 0x4b, 0x57, 0x1a, 0x97, 0x9d, 0x36, 0xcc, 0x5a, 0x66, 0xfc,
	0x52, 0x4b, 0x3f, 0x41, 0x37, 0xe5, 0xb9, 0x02, 0x5b, 0xb7, 0x6d, 0xdd, 0x31, 0xc7, 0x2f, 0x2e,
	0xe4, 0x30, 0xaf, 0xd6, 0xcf, 0xd6, 0x85, 0xd8, 0xf9, 0x7b, 0x1c, 0x9d, 0x43, 0x27, 0xe5, 0xb9,
	0x27, 0x23, 0xcb, 0x50, 0xe0, 0xe9, 0x15, 0x60, 0x4f, 0x46, 0x15, 0xb6, 0x46, 0xd1, 0x47, 0xd0,
	0x17, 0x98, 0x23, 0x2f, 0x30, 0xac, 0x4c, 0x83, 0xad, 0x3b, 0x3d, 0xff, 0xf8, 0x90, 0xfa, 0x60,
	0x36, 0x07, 0xe5, 0xfd, 0xbf, 0x6f, 0x94, 0x81, 0x8b, 0x13, 0x6a, 0x43, 0xe8, 0x33, 0x20, 0xb1,
	0xf5, 0xe7, 0x46, 0x65, 0xfd, 0xf8, 0x1c, 0xd2, 0x5b, 0x8c, 0x31, 0xe4, 0x3e, 0x89, 0x07, 0x53,
	0xe8, 0x1f, 0x85, 0x44, 0xef, 0x82, 0xfe, 0x15, 0x77, 0x75, 0x0b, 0xca, 0xc7, 0x43, 0x33, 0xca,
	0x02, 0x18, 0x75, 0x33, 0x9e, 0x6b, 0x4f, 0xc9, 0xe0, 0x0b, 0x98, 0xad, 0x20, 0xfe, 0x23, 0x9d,
	0xb5, 0xa5, 0x57, 0xfc, 0xe5, 0xe1, 0xae, 0xa1, 0x05, 0x9d, 0xca, 0x35, 0xbd, 0x03, 0x5a, 0xdc,
	0xd4, 0x54, 0x8b, 0xf1, 0xd5, 0x77, 0x38, 0x63, 0x1f, 0xde, 0xdf, 0xfa, 0x3c, 0x0a, 0xb2, 0xd4,
	0x3d, 0x4c, 0xb9, 0xad, 0xa9, 0x66, 0xd7, 0xe4, 0x5f, 0x42, 0x7e, 0x68, 0xfa, 0x9b, 0xf9, 0xeb,
	0x9f, 0xda, 0xe8, 0x34, 0x54, 0x2e, 0x3a, 0x6a, 0x0b, 0x26, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x9e, 0xfa, 0x34, 0xd3, 0xb3, 0x03, 0x00, 0x00,
}
