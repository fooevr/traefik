// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vfasys

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProtoClient is the client API for Proto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoClient interface {
	GetProtoDescription(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProtoDesc, error)
}

type protoClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoClient(cc grpc.ClientConnInterface) ProtoClient {
	return &protoClient{cc}
}

func (c *protoClient) GetProtoDescription(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ProtoDesc, error) {
	out := new(ProtoDesc)
	err := c.cc.Invoke(ctx, "/vfasys.Proto/getProtoDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoServer is the server API for Proto service.
// All implementations must embed UnimplementedProtoServer
// for forward compatibility
type ProtoServer interface {
	GetProtoDescription(context.Context, *empty.Empty) (*ProtoDesc, error)
	mustEmbedUnimplementedProtoServer()
}

// UnimplementedProtoServer must be embedded to have forward compatible implementations.
type UnimplementedProtoServer struct {
}

func (*UnimplementedProtoServer) GetProtoDescription(context.Context, *empty.Empty) (*ProtoDesc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoDescription not implemented")
}
func (*UnimplementedProtoServer) mustEmbedUnimplementedProtoServer() {}

func RegisterProtoServer(s *grpc.Server, srv ProtoServer) {
	s.RegisterService(&_Proto_serviceDesc, srv)
}

func _Proto_GetProtoDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServer).GetProtoDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vfasys.Proto/GetProtoDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServer).GetProtoDescription(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Proto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vfasys.Proto",
	HandlerType: (*ProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getProtoDescription",
			Handler:    _Proto_GetProtoDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys/Proto.proto",
}
