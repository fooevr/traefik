package cache

import (
	"encoding/base64"
	"fmt"
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	"github.com/jhump/protoreflect/desc"
	dynamicProto "github.com/jhump/protoreflect/dynamic"
	"time"
)

func Test() {
	str := ""
	msgs := map[string]*desc.MessageDescriptor{}
	fs := new(descriptor.FileDescriptorSet)
	descBytes, _ := base64.StdEncoding.DecodeString(str)
	ee := fs.XXX_Unmarshal(descBytes)
	if ee != nil {
		fmt.Errorf("can't parse desc")
	}
	files, _ := desc.CreateFileDescriptorsFromSet(fs)
	for _, file := range files {
		for _, msgType := range file.GetMessageTypes() {
			msgs[msgType.GetFullyQualifiedName()] = msgType
		}
	}
	msgDesc := msgs["com.variflight.aps.dataservice.grpc.test"]
	msg1 := dynamicProto.NewMessage(msgDesc)
	child1 := dynamicProto.NewMessage(msgDesc)
	//child1.SetField(msgDesc.FindFieldByNumber(1), "a")
	msg1.PutMapField(msgDesc.FindFieldByNumber(5), "key", child1)
	v1 := time.Now().Unix()
	CacheManager.SetVersionCache("a", v1, msg1, msgDesc, 3000)
	time.Sleep(time.Second)

	msg2 := dynamicProto.NewMessage(msgDesc)
	child2 := dynamicProto.NewMessage(msgDesc)
	child2.SetField(msgDesc.FindFieldByNumber(1), "b")
	msg2.PutMapField(msgDesc.FindFieldByNumber(5), "key", child2)
	CacheManager.SetVersionCache("a", time.Now().Unix(), msg2, msgDesc, 3000)
	time.Sleep(time.Second)

	CacheManager.SetVersionCache("a", time.Now().Unix(), nil, msgDesc, 3000)
	msg, change, _, hit := CacheManager.GetVersionCache("a", v1)
	time.Sleep(1000)
	CacheManager.SetVersionCache("a", time.Now().Unix(), msg2, msgDesc, 3000)
	msg, change, _, hit = CacheManager.GetVersionCache("a", v1)
	//bts, _ := proto.Marshal(change)

	fmt.Println(hit, msg, change)
}
